import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { Loader2, Share2, Download, BookOpen, Save } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { TravelGuide, aiTravelService } from "@/services/aiTravelService";

interface AITravelGuideDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  guide: string | null;
  title: string;
  model: string;
  preferences: any;
  isGenerating: boolean;
}

export const AITravelGuideDialog = ({ 
  open, 
  onOpenChange, 
  guide, 
  title, 
  model, 
  preferences,
  isGenerating 
}: AITravelGuideDialogProps) => {
  const [isSaving, setIsSaving] = useState(false);
  const { toast } = useToast();

  const handleSaveGuide = async () => {
    if (!guide) return;
    
    setIsSaving(true);
    try {
      await aiTravelService.saveGeneratedGuide({
        preferences_snapshot: preferences,
        generated_guide: guide,
        model_used: model,
        title
      });
      
      toast({
        title: "Guide Saved",
        description: "Your travel guide has been saved successfully!",
      });
    } catch (error) {
      console.error('Error saving guide:', error);
      toast({
        title: "Error",
        description: "Failed to save travel guide. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleShare = async () => {
    if (!guide) return;
    
    try {
      await navigator.share({
        title: title,
        text: guide.substring(0, 200) + '...',
        url: window.location.href
      });
    } catch (error) {
      // Fallback to clipboard
      await navigator.clipboard.writeText(guide);
      toast({
        title: "Copied to clipboard",
        description: "Your travel guide has been copied to clipboard!",
      });
    }
  };

  const formatGuideContent = (content: string) => {
    if (!content) return [];
    
    // Split content into sections based on ## headers
    const sections = content.split(/(?=##\s)/);
    return sections.filter(section => section.trim());
  };

  const renderSection = (section: string, index: number) => {
    const lines = section.trim().split('\n');
    const header = lines[0].replace(/^##\s*/, '').replace(/^#+\s*/, '');
    const content = lines.slice(1).join('\n').trim();
    
    return (
      <div key={index} className="space-y-3">
        <h3 className="text-lg font-semibold text-primary flex items-center gap-2">
          <BookOpen className="h-5 w-5" />
          {header}
        </h3>
        <div className="prose prose-sm max-w-none text-muted-foreground">
          {content.split('\n').map((line, lineIndex) => {
            if (line.trim().startsWith('- ')) {
              return (
                <div key={lineIndex} className="flex items-start gap-2 mb-1">
                  <span className="text-primary mt-1">•</span>
                  <span>{line.replace(/^-\s*/, '')}</span>
                </div>
              );
            }
            return line.trim() ? (
              <p key={lineIndex} className="mb-2">{line}</p>
            ) : null;
          })}
        </div>
        {index < formatGuideContent(guide || '').length - 1 && <Separator className="my-6" />}
      </div>
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[80vh] p-0">
        <DialogHeader className="px-6 py-4 border-b">
          <DialogTitle className="text-xl font-bold text-primary">
            {title}
          </DialogTitle>
          <p className="text-sm text-muted-foreground">
            Generated by {model} • Personalized for your preferences
          </p>
        </DialogHeader>
        
        <ScrollArea className="flex-1 px-6 py-4">
          {isGenerating ? (
            <div className="flex items-center justify-center py-12">
              <div className="text-center space-y-4">
                <Loader2 className="h-8 w-8 animate-spin mx-auto text-primary" />
                <div>
                  <h3 className="font-semibold text-lg">Generating Your Personalized Travel Guide</h3>
                  <p className="text-muted-foreground">
                    Our AI is crafting recommendations based on your preferences...
                  </p>
                </div>
              </div>
            </div>
          ) : guide ? (
            <div className="space-y-6">
              {formatGuideContent(guide).map(renderSection)}
            </div>
          ) : (
            <div className="text-center py-12">
              <p className="text-muted-foreground">No guide content available</p>
            </div>
          )}
        </ScrollArea>
        
        {!isGenerating && guide && (
          <DialogFooter className="px-6 py-4 border-t bg-muted/20">
            <div className="flex items-center gap-2 w-full">
              <Button
                variant="outline"
                onClick={handleShare}
                className="flex items-center gap-2"
              >
                <Share2 className="h-4 w-4" />
                Share
              </Button>
              <Button
                variant="outline"
                onClick={handleSaveGuide}
                disabled={isSaving}
                className="flex items-center gap-2"
              >
                {isSaving ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <Save className="h-4 w-4" />
                )}
                Save Guide
              </Button>
              <div className="flex-1" />
              <Button onClick={() => onOpenChange(false)}>
                Close
              </Button>
            </div>
          </DialogFooter>
        )}
      </DialogContent>
    </Dialog>
  );
};